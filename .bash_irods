# following definitions come from the Internet
# Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensity
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensity
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[0;105m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White

BASH_IRODS_REPO_DIR=~/irods

IRODS_REPO_ROOT=~/

irods-build() {
    pushd $IRODS_REPO_ROOT/irods
    BUILDDIR=`pwd`
    done=0
    if [ -e /tmp/external_versions.txt -a -e /tmp/irods_external.tar.gz ]; then
	d=`diff /tmp/external_versions.txt iRODS/config/external_versions.txt`
        if [ "$d" == "" ]; then
            cp /tmp/irods_external.tar.gz external
            done=1
        else
            echo -e "${Yellow}cache invalidated, building external packages${Color_Off}"
        fi
    else
        echo -e "${Yellow}cache not found, building external packages${Color_Off}"
    fi
    if [ $done != 1 ]; then
        pushd iRODS
        scripts/configure
        sed -i -e "\,^IRODS_BUILD_DIR=,s,^.*$,IRODS_BUILD_DIR=$BUILDDIR," ./config/config.mk
        popd
        pushd external
        make generate
        cp irods_external.tar.gz /tmp
        cp ../iRODS/config/external_versions.txt /tmp
        popd
    fi
    echo -e "${On_Cyan}building $1${Color_Off}"
    sudo packaging/build.sh icat postgres
    echo -e "${Green}built $1${Color_Off}"
    popd
}

irods-clone() {
    pushd $IRODS_REPO_ROOT
    sudo rm -rf irods
    if [ -e /tmp/irods-clone ]; then
        cp -r /tmp/irods-clone irods
    else
        git clone https://github.com/irods/irods.git
        pushd irods
        git submodule init
        git submodule update
        popd
        cp -r irods /tmp/irods-clone
    fi
    cd irods
    if [ "$1" != "" ]; then
        git checkout $1
    fi
    echo -e "${Green}cloned $1${Color_Off}"
    popd
}

irods-valgrind() {
    SUCC=0
    if [ "$1" != "" ]; then
    	LABEL=$1
    else
	LABEL=master
    fi
    
    SUM=/tmp/sum
    sudo service irods stop
    pushd /var/lib/irods/iRODS/server/bin
    VALGRIND_OUT=/tmp/$LABEL
    sudo rm -rf $VALGRIND_OUT
    sudo mkdir $VALGRIND_OUT
    sudo chown irods:irods $VALGRIND_OUT
    sudo su irods -c "PATH=$PATH:`pwd` nohup valgrind --tool=memcheck --leak-check=full --trace-children=yes --num-callers=200 --time-stamp=yes --log-file=$VALGRIND_OUT/valgrind_out_%p.txt ./irodsServer &"
    echo -e "${Yellow}sleep 30s${Color_Off}"
    sleep 30
    sudo su - irods -c ils
    if [ $? != 0 ]; then
	echo -e "${Red}error${Color_Off}"
        echo $LABEL error >> $SUM
    else
        r=""
        for f in $VALGRIND_OUT/*; do
	    echo -e "${Blue}Examining $f${Color_Off}"
            r=`sudo su irods -c "grep regionRegion2Cp $f"`
            if [ "$r" != "" ]; then
	        echo -e "${Red}failed $r${Color_Off}"
                echo $LABEL failed >> $SUM
                break
            fi
        done
        if [ "$r" == "" ]; then
	    echo -e "${Green}succeeded${Color_Off}"
            echo $LABEL succeeded >> $SUM
            SUCC=1
        fi
    fi
    popd
}

irods-valgrind-2() {
    irods-clone $1
    irods-build
    irods-repave-dev
    irods-valgrind $2-$1
}
irods-bs-valgrind() {
    SUM=/tmp/sum
    echo "" > $SUM
    irods-clone $1
    pushd $IRODS_REPO_ROOT/irods
    INC=$2
    SKIP=0
    DONE=0
    while [ $DONE == 0 ]; do
        COMMITS=`git log --pretty=format:%H --skip=$SKIP --max-count=$INC`
        echo -e "${Cyan}$COMMITS${Color_Off}"

        ARR=($COMMITS)

        LEFT=0
        RIGHT=$((INC-1))
        SUCCINX=-1
        FAILINX=-1
        while [ $LEFT -le $RIGHT ]; do

            MID=$(((LEFT+RIGHT)/2))
            echo -e "${On_Yellow}$FAILINX || $LEFT >> $MID << $RIGHT || $SUCCINX ${Color_Off}"
            irods-valgrind-2 ${ARR[$MID]} $MID
            if [ $SUCC == 1 ]; then
                SUCCINX=$MID
                RIGHT=$((MID-1))
            else
                FAILINX=$MID
                LEFT=$((MID+1))
            fi
        done
        if [ $SUCCINX == -1 ]; then
            SKIP=$((SKIP + INC))
        else
            echo -e "${Green}found ${ARR[$SUCCINX]}${Color_Off}"
            DONE=1	
        fi
    done
    popd
}

irods-stop-server() {
    sudo su - irods -c "/var/lib/irods/iRODS/irodsctl stop"
}

irods-repave-database() {
   sudo su - postgres -c "psql --command='drop database \"ICAT\";'"
   sudo su - postgres -c "psql --command=\"drop user irods;\""
   sudo su - postgres -c "psql --command=\"create user irods with password 'testpassword';\""
   sudo su - postgres -c "psql --command='create database \"ICAT\";'"
   sudo su - postgres -c "psql --command='grant all privileges on database \"ICAT\" to irods;'"
}

irods-uninstall-irods() {
    sudo dpkg -P irods-resource-plugin-s3 irods-database-plugin-postgres irods-database-plugin-mysql irods-icat irods-dev irods-runtime irods-api-plugin-gridreport irods-icommands-gridreport
    sudo userdel irods
    sudo rm -rf /var/lib/irods
    sudo rm -rf /etc/irods
    sudo rm -rf /tmp/irods
    sudo rm -rf /usr/lib/irods
}

irods-install-irods-dev() {
    sudo dpkg -i ${BASH_IRODS_REPO_DIR}/build/irods-icat-*.deb ${BASH_IRODS_REPO_DIR}/build/irods-database-plugin-*.deb ${BASH_IRODS_REPO_DIR}/build/irods-dev-*.deb ${BASH_IRODS_REPO_DIR}/build/irods-runtime-*.deb
}

irods-install-irods-403() {
    local package_dir=~/software/irods-old-packages/4.0.3
    sudo dpkg -i ${package_dir}/irods-icat-4.0.3-64bit.deb ${package_dir}/irods-database-plugin-postgres-1.4.deb ${package_dir}/irods-dev-4.0.3-64bit.deb ${package_dir}/irods-runtime-4.0.3-64bit.deb
}

irods-install-irods-403-debug() {
    local package_dir=~/software/irods-old-packages/4.0.3-debug
    sudo dpkg -i ${package_dir}/irods-icat-4.0.3-64bit.deb ${package_dir}/4.0.3-debug/irods-database-plugin-postgres-1.4.deb ${package_dir}/irods-dev-4.0.3-64bit.deb ${package_dir}/irods-runtime-4.0.3-64bit.deb
}

irods-setup-irods() {
    sudo /var/lib/irods/packaging/setup_irods.sh < /var/lib/irods/tests/localhost_setup_postgres.input
}

irods-repave-dev() {
    pushd ~
    irods-stop-server
    irods-uninstall-irods
    irods-repave-database
    irods-install-irods-dev
    irods-setup-irods
    popd
}

irods-repave-403() {
    irods-stop-server
    irods-remake-database
    irods-uninstall-irods
    irods-install-irods-403
    irods-setup-irods
}

irods-repave-403-debug() {
    irods-stop-server
    irods-remake-database
    irods-uninstall-irods
    irods-install-irods-403-debug
    irods-setup-irods
}

irods-rebuild-parameterized() {
    rm -f ${BASH_IRODS_REPO_DIR}/build/*
    ${BASH_IRODS_REPO_DIR}/packaging/build.sh clean
    sudo ${BASH_IRODS_REPO_DIR}/packaging/build.sh $1 icat $2
    sudo chown -R kellerb:kellerb ${BASH_IRODS_REPO_DIR}
}

irods-rebuild-postgres-debug() {
    irods-rebuild-parameterized '' 'postgres'
}

irods-rebuild-postgres() {
    irods-rebuild-parameterized '-r' 'postgres'
}

irods-rebuild-mysql() {
    irods-rebuild-parameterized '-r' 'mysql'
}

irods-rebuild-oracle() {
    irods-rebuild-parameterized '-r' 'oracle'
}

irods-repave-tests() {
    sudo cp ${BASH_IRODS_REPO_DIR}/tests/pydevtest/* ~irods/tests/pydevtest/
    sudo chown -R irods:irods ~irods/tests/pydevtest/
}
